#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <LiquidCrystal_I2C.h>
#include "user_config.h"

WiFiClient espClient;
PubSubClient client(espClient);

volatile unsigned int counter1 = 0;
volatile unsigned int counter2 = 0;
volatile unsigned int counter3 = 0;
volatile double ampAdc1 = 0;
volatile double ampAdc2 = 0;
volatile double ampAdc3 = 0;

void setup() {

    Serial.begin(112500);
    delay(1000);

    // We start by connecting to a WiFi network
    // connectWifi();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(SSID);

    WiFi.begin(SSID, PASSWORD);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    // config Mqtt 
    client.setServer(MQTT_SERVER, MQTT_PORT);
    client.setCallback(callback);

    // config task list
    xTaskCreate(
        taskOne,          /* Task function. */
        "TaskOne",        /* String with name of task. */
        10000,            /* Stack size in words. */
        NULL,             /* Parameter passed as input of the task */
        1,                /* Priority of the task. */
        NULL);            /* Task handle. */

    xTaskCreate(
        taskTwo,          /* Task function. */
        "TaskTwo",        /* String with name of task. */
        10000,            /* Stack size in words. */
        NULL,             /* Parameter passed as input of the task */
        1,                /* Priority of the task. */
        NULL);            /* Task handle. */

}

void connectWifi() {
    // We start by connecting to a WiFi network
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(SSID);

    WiFi.begin(SSID, PASSWORD);
    delay(500);
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("Not connect");
    } else {
        Serial.println("");
        Serial.println("WiFi connected");
        Serial.println("IP address: ");
        Serial.println(WiFi.localIP());
    }

}

void callback(char* topic, byte* payload, unsigned int length) {
    String jsonStr = "";

    for (int i = 0; i < length; i++) {
        //Serial.print((char)payload[i]);
        jsonStr += (char)payload[i];
    }

    StaticJsonBuffer<200> jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(jsonStr);

    String detect = root["detect"];
    if (detect == "ON") {
        Serial.println("detect: ON");
    }
    if (detect == "OFF") {
        Serial.println("detect: OFF");
    }
}

void reconnect() {
    // Loop until we're reconnected
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        // Attempt to connect
        if (client.connect("ESP32Client", "esp32", "mtt@23377", "nth/lwt", 0, false, "offline")) {
            Serial.println("connected");
            // Once connected, publish an announcement...
            client.publish(TOPIC_PUBLISH, "hello world");
            // ... and resubscribe
            client.subscribe(TOPIC_SUBSCRIBE);
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            // Wait 5 seconds before retrying
            delay(5000);
        }
    }
}

void loop() {
    // Kiểm tra kết nối Wifi
    while (WiFi.status() != WL_CONNECTED) {
        connectWifi();
    }
    // Kiểm tra kết nối với Mqtt Server
    if (!client.connected()) {
        reconnect();
    }
    client.loop(); 

    double data1, data2, data3;
    
    data1 = ceilf(ampAdc1);
    ampAdc1 = 0;
    counter1 = 0;
    data2 = ceilf(ampAdc2);
    ampAdc2 = 0;
    counter2 = 0;
    data3 = ceilf(ampAdc3);
    ampAdc3 = 0;
    counter3 = 0;

    StaticJsonBuffer<200> jsonBuffer;
    JsonObject& root = jsonBuffer.createObject();
    root["value1"] = data1;
    root["value2"] = data2;
    root["value3"] = data3;

    char JSONmessageBuffer[100];
    root.printTo(JSONmessageBuffer, sizeof(JSONmessageBuffer));
    client.publish(TOPIC_PUBLISH, JSONmessageBuffer);

    delay(5000);
}

void taskOne( void * parameter )
{

    unsigned long adcValue = 0;
    unsigned long sampleTime = 0;
    unsigned long maxValue = 0;
    double avr = 0;
    double result = 0;
    double temp;
    //unsigned long startTime = millis();

    // initialize ADC
    analogSetWidth(12);
    analogSetPinAttenuation(PIN_ADC1, ADC_6db);

    while(1)
    {
        sampleTime = 0;
        avr = 0;
        maxValue = 0;
        while(sampleTime < 2000)
        {
            #if defined(RAW_ADC)
                adcValue = analogRead(PIN_ADC1);
            #else
                adcValue = analogRead(PIN_ADC1) - ADC_ZERO_1;
                avr = avr + (double)(adcValue * adcValue);
                /*if(adcValue > maxValue){
                    maxValue = adcValue;
                }*/
            #endif
                sampleTime++;
        }

        temp = sqrt(avr/(double)sampleTime);
        // printf("adc1 = %.2f\n",temp);

        result = sqrt(avr/(double)sampleTime) * (CALIBRATION_RATIO/4096.0); // Lay gia tri trung binh
        
        result = result - 0.10;

        if(result<0.20)    
            result = 0;
        else
            result = result + 0.10;
        
        result = result * TI_RATIO;

        #if defined(RAW_ADC)
            ampAdc1 = (ampAdc1 + adcValue) / (counter1 + 1);
        #else       
            ampAdc1 = (ampAdc1 + result) / (counter1 + 1);
        #endif
        counter1 = 1;

        delay(100);
    }

    vTaskDelete( NULL );

}

void taskTwo( void * parameter)
{

    
    vTaskDelete( NULL );
}

